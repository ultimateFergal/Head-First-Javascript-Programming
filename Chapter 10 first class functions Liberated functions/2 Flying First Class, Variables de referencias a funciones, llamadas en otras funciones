<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Flyin first class variables referencias a fucniones, funciones como parametros de otras funciones</title>
	<script>

		// var passengers = [ { name: "Jane Doloop", paid: true },
		// { name: "Dr. Evel", paid: true },
		// { name: "Sue Property", paid: false },
		// { name: "John Funcall", paid: true } 

		var passengers = [ { name: "Jane Doloop", paid: true, ticket: "coach" },
		{ name: "Dr. Evel", paid: true, ticket: "firstclass" },
		{ name: "Sue Property", paid: false, ticket: "firstclass" },
		{ name: "John Funcall", paid: true, ticket: "premium" } ];


		//Las funciones pueden recibir como parámetros otras 
		//funciones y lo que éstas últimas necesiten de parámetros
		function processPassengers(passengers, testFunction) {
			for (var i = 0; i < passengers.length; i++) {
				if (testFunction(passengers[i])) {
					return false;
				}
			}
			return true;
		}

		function checkNoFlyList(passenger) {
			return (passenger.name === "Dr. Evel");
		}
		function checkNotPaid(passenger) {
			return (!passenger.paid);
		}

		//Funciones creadas como expresión y no como declaración, usando variable de referenncia a la función, las funciones pueden recibir como parámetros otras 
		//funciones y lo que éstas últimas necesiten de parámetros
		var allCanFly = processPassengers(passengers, checkNoFlyList);
		if (!allCanFly) {
			console.log("The plane can't take off: we have a passenger on the no-fly-list.");
		}
		var allPaid = processPassengers(passengers, checkNotPaid);
		if (!allPaid) {
			console.log("The plane can't take off: not everyone has paid.");
		}

		function printPassenger(passenger) {
			var message = passenger.name;
			if (passenger.paid === true) {
				message = message + " has paid";
			} else {
				message = message + " has not paid";
			}
			console.log(message);
			return false;
		}
		
		var cosa = processPassengers(passengers, printPassenger);
		console.log(" ");
		console.log(cosa);


		//Funcióon que retorna otra función para falicitar granularidad y encapsulamientoDevuelve una función
		function createDrinkOrder(passenger) {
			var orderFunction;
			if (passenger.ticket === "firstclass") {
				orderFunction = function() {
					alert("Would you like a cocktail or wine?");
				};
			} else if (passenger.ticket === "premium") {
				orderFunction = function() {
					alert("Would you like wine, cola or water?");
				};
			} else {
				orderFunction = function() {
					alert("Your choice is cola or water.");
				};
			}
			return orderFunction;
		}


		function createDinnerOrder(passenger) {
			var orderFunction;
			if (passenger.ticket === "firstclass") {
				orderFunction = function() {
					alert("Would you like chicken or pasta?");
				};
			} else if (passenger.ticket === "premium") {
				orderFunction = function() {
					alert("Would you like a snack box or cheese plate?");
				};
			} else {
				orderFunction = function() {
					alert("Would you like peanuts or pretzels?");
				};
			}
			return orderFunction;
		}

		function serveCustomer(passenger) {
			var getDrinkOrderFunction = createDrinkOrder(passenger);
			var getDinnerOrderFunction = createDinnerOrder(passenger);
			getDrinkOrderFunction();
			// get dinner order
			getDinnerOrderFunction();
			
			getDrinkOrderFunction();
			getDrinkOrderFunction();
			// show movie
			getDrinkOrderFunction();
			// pick up trash
		}

		function servePassengers(passengers) {
			for (var i = 0; i < passengers.length; i++) {
				serveCustomer(passengers[i]);
			}
		}
		servePassengers(passengers);	
	</script>
</head>
<body>

</body>
</html>